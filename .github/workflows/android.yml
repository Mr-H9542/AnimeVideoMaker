name: Android Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check disk space
        run: df -h
        continue-on-error: true

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: ${{ env.ANDROID_SDK_ROOT }}
          key: android-sdk-${{ runner.os }}-cmdline-tools-9477386
          restore-keys: android-sdk-${{ runner.os }}-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Android SDK command-line tools
        run: |
          rm -rf ${{ env.ANDROID_SDK_ROOT }}/*
          mkdir -p ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools
          wget --tries=3 --waitretry=5 --timeout=30 https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip || { echo "Download failed"; exit 1; }
          unzip cmdline-tools.zip -d ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools
          mv ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/cmdline-tools ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest
          rm -f cmdline-tools.zip
          ls -R ${{ env.ANDROID_SDK_ROOT }}

      - name: Accept Android SDK licenses
        run: yes | ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Install SDK platforms and build-tools
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin/sdkmanager --sdk_root=${{ env.ANDROID_SDK_ROOT }} "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        continue-on-error: true

      - name: Create local.properties file
        run: echo "sdk.dir=${{ env.ANDROID_SDK_ROOT }}" > local.properties

      - name: Build debug APK and capture log
        run: |
          ./gradlew assembleDebug --warning-mode all --stacktrace --info > full_build.log 2>&1 || echo "Build failed"
        continue-on-error: true

      - name: Upload debug APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: warn

      - name: Upload full Gradle build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-build-log
          path: full_build.log
          if-no-files-found: warn

      - name: Run unit tests (if available)
        run: |
          if ./gradlew tasks | grep -q test; then
            ./gradlew test --warning-mode all --stacktrace --info
          else
            echo "No unit tests found, skipping"
          fi
        continue-on-error: true

      - name: List test results directory (for debugging)
        if: always()
        run: ls -R app/build/test-results/

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: app/build/test-results/**/*.xml
          if-no-files-found: warn

      - name: Upload Gradle build reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-reports
          path: |
            build/reports/problems/problems-report.html
            **/build.gradle
            **/gradle-wrapper.properties
          if-no-files-found: warn

      - name: Summarize build log errors
        if: always()
        run: |
          echo "## Build Log Summary" >> $GITHUB_STEP_SUMMARY
          grep -iE "FAILURE:|error:|exception:" full_build.log | tail -n 50 >> $GITHUB_STEP_SUMMARY || echo "No critical errors found" >> $GITHUB_STEP_SUMMARY
